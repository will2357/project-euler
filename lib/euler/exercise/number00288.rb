require './lib/euler/exercise/main'

class Euler::Exercise::Number00288 < Euler::Exercise::Main
  @@number = self.to_s[-5,5].to_i
  def initialize;super(@@number);end

=begin
Problem 288:

For any prime p the number N(p, q) is defined by
N(p, q) = \sum_{n = 0}^q T_n \cdot p^n
with T_n generated by the following random number generator:

S_0 = 290797
S_{n + 1} = S_n^2 \bmod 50515093
T_n = S_n \bmod p

Let \operatorname{Nfac}(p, q) be the factorial of N(p, q).
Let \operatorname{NF}(p, q) be the number of factors p in \operatorname{Nfac}(p, q).

You are given that \operatorname{NF}(3,10000) \bmod 3^{20} = 624955285.

Find \operatorname{NF}(61, 10^7) \bmod 61^{10}.

Source: https://projecteuler.net/problem=288
=end

  # Change __FILL_ME_IN__ so that 'my_solution' returns the correct answer.
  # Use __SKIP__ or "SKIP" to move on to the next question.
  def my_solution
    __FILL_ME_IN__
  end
end
